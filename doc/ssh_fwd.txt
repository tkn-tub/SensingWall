ssh -L 8087:localhost:8087 -L 3001:localhost:3001 -L 9091:localhost:9091 -t zubow@lab00.tkn.tu-berlin.de \
   ssh -L 8087:localhost:8087 -L 3001:localhost:3001 -L 9091:localhost:9091 -t csibox@130.149.49.35 \
         ssh -L 8087:localhost:8086 -L 3001:localhost:3000 -L 9091:localhost:9090 -t csibox@10.0.0.5


Other:

AP is at /dev/ttyACM16 and /dev/ttyACM17, rest is stations:

ls -la /dev/serial/by-id/

Note that ESP32S3 allows a maximum of 10 connected stations overall, which means there's a place for only one more node. (It is probably connected to the server but somehow doesn't show under ls /dev/ttyACM*)

You can use the following command to login and forward the required ports to access the services:

ssh -L 8086:localhost:8086 -L 3000:localhost:3000 -L 9090:localhost:9090 -t <user>@lab00.tkn.tu-berlin.de \
   ssh -L 8086:localhost:8086 -L 3000:localhost:3000 -L 9090:localhost:9090 -t csibox@130.149.49.35 \
         ssh -L 8086:localhost:8086 -L 3000:localhost:3000 -L 9090:localhost:9090 -t csibox@10.0.0.5

Grafan Dashboard: http://localhost:3000/d/c8139da0-61fa-428a-8e1d-4da0a30d9f03/csi?orgId=1&from=now-5m&to=now
User: admin, password: root1234

InfluxDB bucket to see the actual data: http://localhost:8086/orgs/8f108ef89836cbd1/data-explorer?fluxScriptEditor
user: root, password: root1234

Prometheus at: http://localhost:9090/

Sometimes the AP restarts so the server disconnects and does not reconnect automatically, so we have to reconnect manually:

sudo iwconfig wlp101s0 essid myssid

commands for building/flashing etc under the directory ~/esp/esp-csi-testbed:

make ap_fullclean
make ap_build
make ap_flash_monitor PORT=/dev/ttyACM16
make ap_monitor PORT=/dev/ttyACM16

make station_fullclean
make station_build
make station_flash_monitor PORT=some port
make station_monitor PORT=some port

"from(bucket: \"csi\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"packet_rate\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rate\")\n  |> aggregateWindow(every: 60s, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"

from(bucket: "csi")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "csi" and r.source == "34:85:18:b9:1a:64")
  |> map(fn: (r) => ({_value: int(v: r.rssi), _source:r.sourc,e _time: r._time}))
  |> aggregateWindow(every: 60s, fn: mean, createEmpty: false)
  |> yield(name: "downlink")
